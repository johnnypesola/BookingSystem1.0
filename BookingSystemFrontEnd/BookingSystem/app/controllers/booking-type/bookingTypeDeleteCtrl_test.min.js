describe("module: bookingSystem.bookingType",function(){beforeEach(module("bookingSystem"));beforeEach(module("bookingSystem.bookingType"));beforeEach(module("bookingSystem.commonFilters"));var BookingTypeDeleteCtrl;var testCurrentDateObj;var $scope;var $location;var $rootScope;beforeEach(function(){module(function($provide){$provide.factory("BookingType",function($q){return{get:jasmine.createSpy("get").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.getBookingType,$q)}),query:jasmine.createSpy("query").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryBookingType,$q)}),save:jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)}),"delete":jasmine.createSpy("delete").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)})}})})});beforeEach(inject(function($controller,_BookingType_,_$location_,$rootScope){$location=_$location_;$scope=$rootScope;BookingTypeDeleteCtrl=$controller("BookingTypeDeleteCtrl",{$scope:$scope,BookingType:_BookingType_,$rootScope:$rootScope})}));describe("BookingTypeDeleteCtrl controller",function(){it("should call history.back() and create a FlashMessage after successful BookingType Deleting",inject(function($rootScope,$controller,_BookingType_,$routeParams){spyOn(history,"back");$scope.bookingType={Name:"Test"};$routeParams.bookingTypeId=4;$scope.confirm();expect(_BookingType_.delete).toHaveBeenCalledWith({bookingTypeId:4});$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after protected BookingType Deleteing",inject(function($rootScope,$controller,_BookingType_,$q,$routeParams){_BookingType_.delete=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"400","Foreign key references exists")});spyOn(history,"back");$scope.bookingType={Name:"Test"};$routeParams.bookingTypeId=4;$scope.confirm();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Bokningstypen kan inte raderas eftersom det finns"+" en bokning eller en resurs som refererar till bokningstypen");expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful (status 500) BookingType Deleteing",inject(function($rootScope,$controller,_BookingType_,$q,$routeParams){_BookingType_.delete=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"500")});spyOn(history,"back");$scope.bookingType={Name:"Test"};$routeParams.bookingTypeId=4;$scope.confirm();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Ett oväntat fel uppstod när bokningstypen skulle tas bort");expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful (status 400) BookingType Deleteing",inject(function($rootScope,$controller,_BookingType_,$q,$routeParams){_BookingType_.delete=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"400")});spyOn(history,"back");$scope.bookingType={Name:"Test"};$routeParams.bookingTypeId=4;$scope.confirm();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Ett oväntat fel uppstod när bokningstypen skulle tas bort");expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful (status 404) BookingType Deleteing",inject(function($rootScope,$controller,_BookingType_,$q,$routeParams){_BookingType_.delete=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"404")});spyOn(history,"back");$scope.bookingType={Name:"Test"};$routeParams.bookingTypeId=4;$scope.confirm();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual('Bokningstypen "Test" existerar inte längre. Hann kanske någon radera den?');expect(history.back).toHaveBeenCalled()}))})});