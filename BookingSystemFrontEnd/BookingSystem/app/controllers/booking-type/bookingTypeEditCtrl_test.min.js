describe("module: bookingSystem.bookingType",function(){beforeEach(module("bookingSystem"));beforeEach(module("bookingSystem.bookingType"));beforeEach(module("bookingSystem.commonFilters"));var BookingTypeListCtrl,BookingTypeCreateCtrl,BookingTypeEditCtrl;var testCurrentDateObj;var $scope;var $location;var $rootScope;beforeEach(function(){module(function($provide){$provide.factory("BookingType",function($q){return{get:jasmine.createSpy("get").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.getBookingType,$q)}),query:jasmine.createSpy("query").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryBookingType,$q)}),save:jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)}),"delete":jasmine.createSpy("delete").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)})}})})});beforeEach(inject(function($controller,_BookingType_,_$location_,$rootScope){$location=_$location_;$scope=$rootScope;BookingTypeEditCtrl=$controller("BookingTypeEditCtrl",{$scope:$scope,BookingType:_BookingType_,$rootScope:$rootScope})}));describe("BookingTypeEditCtrl controller",function(){it("should call history.back() and create a FlashMessage after successful BookingType editing",inject(function($rootScope,$controller,_BookingType_,$routeParams){spyOn(history,"back");$scope.bookingType=TestHelper.JSON.createBookingType;$routeParams.bookingTypeId=0;$scope.save();expect(_BookingType_.save).toHaveBeenCalledWith(TestHelper.JSON.createBookingType);$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after duplicate BookingType editing",inject(function($rootScope,$controller,_BookingType_,$q){_BookingType_.save=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"409","There is already a BookingType with the given name.")});spyOn(history,"back");$scope.bookingType={Name:"Test"};$scope.save();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual('Det finns redan en bokningstyp som heter "Test". Två bokningstyper kan inte heta lika.');expect(history.back).not.toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful BookingType editing",inject(function($rootScope,$controller,_BookingType_,$q){_BookingType_.save=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"500")});spyOn(history,"back");$scope.bookingType={Name:"Test"};$scope.save();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Ett oväntat fel uppstod när bokningstypen skulle sparas");expect(history.back).not.toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful BookingType editing (bookingType deleted)",inject(function($rootScope,$controller,_BookingType_,$q){_BookingType_.save=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"404")});spyOn(history,"back");$scope.bookingType={Name:"Test"};$scope.save();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual('Bokningstypen "Test" existerar inte längre. Hann kanske någon radera den?');expect(history.back).toHaveBeenCalled()}))})});