describe("module: bookingSystem.location",function(){beforeEach(module("bookingSystem"));beforeEach(module("bookingSystem.location"));beforeEach(module("bookingSystem.commonFilters"));var LocationDeleteCtrl;var testCurrentDateObj;var $scope;var $location;var $rootScope;beforeEach(function(){module(function($provide){$provide.factory("Location",function($q){return{get:jasmine.createSpy("get").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.getLocation,$q)}),query:jasmine.createSpy("query").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryLocation,$q)}),save:jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)}),"delete":jasmine.createSpy("delete").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)})}})})});beforeEach(inject(function($controller,_Location_,_$location_,$rootScope){$location=_$location_;$scope=$rootScope;LocationDeleteCtrl=$controller("LocationDeleteCtrl",{$scope:$scope,Location:_Location_,$rootScope:$rootScope})}));describe("LocationDeleteCtrl controller",function(){it("should call redirect() and create a FlashMessage after successful Location Deleting",inject(function($rootScope,$controller,_Location_,$routeParams){spyOn(history,"back");$scope.location={Name:"Test"};$routeParams.locationId=4;$scope.confirm();expect(_Location_.delete).toHaveBeenCalledWith({locationId:4});$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after protected Location Deleteing",inject(function($rootScope,$controller,_Location_,$q,$routeParams){_Location_.delete=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"400","Foreign key references exists")});spyOn(history,"back");$scope.location={Name:"Test"};$routeParams.locationId=4;$scope.confirm();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Platsen kan inte raderas eftersom det finns"+" en lokalbokning eller en annan lokal/plats som refererar till platsen");expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful (status 500) Location Deleteing",inject(function($rootScope,$controller,_Location_,$q,$routeParams){_Location_.delete=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"500")});spyOn(history,"back");$scope.location={Name:"Test"};$routeParams.locationId=4;$scope.confirm();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Ett oväntat fel uppstod när platsen skulle tas bort");expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful (status 400) Location Deleteing",inject(function($rootScope,$controller,_Location_,$q,$routeParams){_Location_.delete=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"400")});spyOn(history,"back");$scope.location={Name:"Test"};$routeParams.locationId=4;$scope.confirm();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Ett oväntat fel uppstod när platsen skulle tas bort");expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful (status 404) Location Deleteing",inject(function($rootScope,$controller,_Location_,$q,$routeParams){_Location_.delete=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"404")});spyOn(history,"back");$scope.location={Name:"Test"};$routeParams.locationId=4;$scope.confirm();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual('Platsen "Test" existerar inte längre. Hann kanske någon radera den?');expect(history.back).toHaveBeenCalled()}))})});