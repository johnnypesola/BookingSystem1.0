describe("module: bookingSystem.location",function(){beforeEach(module("bookingSystem"));beforeEach(module("bookingSystem.location"));beforeEach(module("bookingSystem.commonFilters"));var LocationListCtrl,LocationCreateCtrl,LocationEditCtrl;var testCurrentDateObj;var $scope;var $location;var $rootScope;beforeEach(function(){module(function($provide){$provide.factory("Location",function($q){return{get:jasmine.createSpy("get").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.getLocation,$q)}),query:jasmine.createSpy("query").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryLocation,$q)}),save:jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)}),"delete":jasmine.createSpy("delete").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)})}});$provide.factory("Furnituring",function($q){return{get:jasmine.createSpy("get").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.getFurnituring,$q)}),query:jasmine.createSpy("query").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryFurnituring,$q)}),"delete":jasmine.createSpy("delete").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)})}});$provide.factory("LocationFurnituring",function($q){return{queryForLocation:jasmine.createSpy("queryForLocation").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryForLocation,$q)}),removeForLocation:jasmine.createSpy("removeForLocation").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)})}})})});beforeEach(inject(function($controller,_Location_,_$location_,$rootScope){$location=_$location_;$scope=$rootScope;LocationEditCtrl=$controller("LocationEditCtrl",{$scope:$scope,Location:_Location_,$rootScope:$rootScope})}));describe("LocationEditCtrl controller",function(){it("should call history.back() and create a FlashMessage after successful Location editing",inject(function($rootScope,$controller,_Location_,$routeParams){spyOn(history,"back");$scope.location={Name:"Test"};$routeParams.locationId=4;$scope.save();expect(_Location_.save).toHaveBeenCalledWith({LocationId:4,Name:"Test"});$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after duplicate Location editing",inject(function($rootScope,$controller,_Location_,$q){_Location_.save=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"409","There is already a Location with the given name.")});spyOn(history,"back");$scope.$digest();$scope.location.Name="Test";$scope.save();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual('Det finns redan en plats som heter "Test". Två platser kan inte heta lika.');expect(history.back).not.toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful Location editing",inject(function($rootScope,$controller,_Location_,$q){_Location_.save=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"500")});spyOn(history,"back");$scope.location={Name:"Test"};$scope.save();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Ett oväntat fel uppstod när platsen skulle sparas");expect(history.back).not.toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful Location editing (location deleted)",inject(function($rootScope,$controller,_Location_,$q){_Location_.save=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"404")});spyOn(history,"back");$scope.$digest();$scope.location.Name="Test";$scope.save();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual('Platsen "Test" existerar inte längre. Hann kanske någon radera den?');expect(history.back).toHaveBeenCalled()}));it("should contain correct map variables convertMarkers() method",inject(function($rootScope,$controller,_Location_,Redirect,$routeParams){$routeParams.locationId=4;LocationEditCtrl.initMapVariables();LocationEditCtrl.convertMarkers();expect($scope.map.zoom).toEqual(18);expect($scope.map.center).toEqual({latitude:LocationEditCtrl.location.GPSLatitude,longitude:LocationEditCtrl.location.GPSLongitude});expect($scope.markers[0]).toEqual({id:LocationEditCtrl.location.LocationId,coords:{latitude:LocationEditCtrl.location.GPSLatitude,longitude:LocationEditCtrl.location.GPSLongitude}})}));it("should contain correct map variables moveMarkerOnClick() method",inject(function($rootScope,$controller,_Location_,Redirect,$routeParams){var args=[];$routeParams.locationId=4;$scope.$digest();LocationEditCtrl.initMapVariables();LocationEditCtrl.convertMarkers();args[0]={latLng:{lat:function(){return 57},lng:function(){return 12}}};LocationEditCtrl.moveMarkerOnClick("not important","not important",args);$scope.$digest();expect($scope.location.GPSLatitude).toEqual(57);expect($scope.location.GPSLongitude).toEqual(12);expect($scope.markers[0].coords).toEqual({latitude:57,longitude:12})}))})});