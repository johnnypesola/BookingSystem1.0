describe("module: bookingSystem.locationBooking",function(){beforeEach(module("bookingSystem"));beforeEach(module("bookingSystem.locationBooking"));beforeEach(module("bookingSystem.commonFilters"));var LocationBookingListCtrl,LocationBookingCreateCtrl,LocationBookingEditCtrl;var testCurrentDateObj;var $scope;var $location;var $rootScope;beforeEach(function(){module(function($provide){$provide.factory("LocationBooking",function($q){return{get:jasmine.createSpy("get").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.getLocationBooking,$q)}),query:jasmine.createSpy("query").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryLocationBooking,$q)}),save:jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)}),"delete":jasmine.createSpy("delete").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)})}});$provide.factory("Booking",function($q){return{get:jasmine.createSpy("get").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.getBooking,$q)}),query:jasmine.createSpy("query").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryBooking,$q)}),save:jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({BookingId:85},$q)}),"delete":jasmine.createSpy("delete").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)})}});$provide.factory("BookingType",function($q){return{get:jasmine.createSpy("get").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.getBookingType,$q)}),query:jasmine.createSpy("query").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryBookingType,$q)}),save:jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)}),"delete":jasmine.createSpy("delete").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)})}});$provide.factory("Customer",function($q){return{get:jasmine.createSpy("get").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.getCustomer,$q)}),query:jasmine.createSpy("query").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryCustomer,$q)}),save:jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)}),"delete":jasmine.createSpy("delete").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)})}});$provide.factory("Location",function($q){return{get:jasmine.createSpy("get").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.getLocation,$q)}),query:jasmine.createSpy("query").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryLocation,$q)}),save:jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({LocationId:3},$q)}),"delete":jasmine.createSpy("delete").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)}),queryFreeForPeriod:jasmine.createSpy("query").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryLocation,$q)})}});$provide.factory("LocationFurnituring",function($q){return{queryForLocation:jasmine.createSpy("queryForLocation").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryFurnituring,$q)})}})})});beforeEach(inject(function($controller,_LocationBooking_,_$location_,$rootScope,_Redirect_,_Booking_){$location=_$location_;$scope=$rootScope;LocationBookingCreateCtrl=$controller("LocationBookingCreateCtrl",{$scope:$scope,LocationBooking:_LocationBooking_,$rootScope:$rootScope,Redirect:_Redirect_,Booking:_Booking_})}));describe("LocationBookingCreateCtrl controller",function(){it("should call history.back() and create a FlashMessage after successful LocationBooking creation",inject(function($rootScope,$controller,_LocationBooking_,Redirect,_Booking_){var exprectedLocationBookingResult;spyOn(history,"back");$scope.booking=TestHelper.JSON.createBookingForLocation;$scope.locationBooking=TestHelper.JSON.createLocationBooking;$scope.locationBooking.SelectedFurnituring={};$scope.locationBooking.SelectedFurnituring.FurnituringId=2;$scope.StartDate="2015-05-05";$scope.StartTime="10:00";$scope.EndDate="2015-05-05";$scope.EndTime="10:30";$scope.save();$rootScope.$apply();expect(_Booking_.save).toHaveBeenCalledWith(TestHelper.JSON.createBookingForLocation);expect(_LocationBooking_.save).toHaveBeenCalledWith(TestHelper.JSON.createdLocationBooking);$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after duplicate LocationBooking creation",inject(function($rootScope,$controller,_LocationBooking_,$q){_LocationBooking_.save=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"409","")});spyOn(history,"back");$scope.booking=TestHelper.JSON.createBookingForLocation;$scope.locationBooking=TestHelper.JSON.createLocationBooking;$scope.locationBooking.SelectedFurnituring={};$scope.locationBooking.SelectedFurnituring.FurnituringId=2;$scope.StartDate="2015-05-05";$scope.StartTime="10:00";$scope.EndDate="2015-05-05";$scope.EndTime="10:30";$scope.save();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Lokalen 채r tyv채rr redan bokad under vald tidsram.");expect(history.back).not.toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful LocationBooking creation",inject(function($rootScope,$controller,_LocationBooking_,$q){_LocationBooking_.save=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"500")});spyOn(history,"back");$scope.booking=TestHelper.JSON.createBookingForLocation;$scope.locationBooking=TestHelper.JSON.createLocationBooking;$scope.locationBooking.SelectedFurnituring={};$scope.locationBooking.SelectedFurnituring.FurnituringId=2;$scope.StartDate="2015-05-05";$scope.StartTime="10:00";$scope.EndDate="2015-05-05";$scope.EndTime="10:30";$scope.save();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Ett ov채ntat fel uppstod n채r lokal/plats-bokningen skulle sparas");expect(history.back).not.toHaveBeenCalled()}));it("should have correct furniturings after fetched update furniturings",inject(function($rootScope,$controller,_LocationBooking_,$q){$scope.locationBooking.LocationId=3;$scope.updateFurniturings();expect($scope.furniturings).toEqual(TestHelper.JSON.queryFurnituring)}))})});