describe("module: bookingSystem.locationBooking",function(){beforeEach(module("bookingSystem"));beforeEach(module("bookingSystem.locationBooking"));beforeEach(module("bookingSystem.commonFilters"));var BookingDeleteCtrl;var testCurrentDateObj;var $scope;var $location;var $rootScope;beforeEach(function(){module(function($provide){$provide.factory("LocationBooking",function($q){return{get:jasmine.createSpy("get").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.getLocationBooking,$q)}),query:jasmine.createSpy("query").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryLocationBooking,$q)}),save:jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)}),"delete":jasmine.createSpy("delete").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)})}})})});beforeEach(inject(function($controller,_LocationBooking_,_$location_,$rootScope,_Redirect_){$location=_$location_;$scope=$rootScope;LocationBookingDeleteCtrl=$controller("LocationBookingDeleteCtrl",{$scope:$scope,LocationBooking:_LocationBooking_,$rootScope:$rootScope,Redirect:_Redirect_})}));describe("LocationBookingDeleteCtrl controller",function(){it("should call history.back() and create a FlashMessage after successful LocationBooking Deleting",inject(function($rootScope,$controller,_LocationBooking_,$routeParams,Redirect){spyOn(history,"back");$scope.locationBooking={Name:"Test"};$routeParams.locationBookingId=4;$scope.confirm();expect(_LocationBooking_.delete).toHaveBeenCalledWith({locationBookingId:4});$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after protected LocationBooking Deleteing",inject(function($rootScope,$controller,_LocationBooking_,$q,$routeParams,Redirect){_LocationBooking_.delete=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"400","Foreign key references exists")});spyOn(history,"back");$scope.locationBooking={Name:"Test"};$routeParams.locationBookingId=4;$scope.confirm();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Lokal/plats-bokningen kan inte raderas eftersom det finns någonting som refererar till lokal/plats-bokningen");expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful (status 500) LocationBooking Deleteing",inject(function($rootScope,$controller,_LocationBooking_,$q,$routeParams){_LocationBooking_.delete=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"500")});spyOn(history,"back");$scope.locationBooking={Name:"Test"};$routeParams.locationBookingId=4;$scope.confirm();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Ett oväntat fel uppstod när lokal/plats-bokningen skulle tas bort");expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful (status 400) LocationBooking Deleteing",inject(function($rootScope,$controller,_LocationBooking_,$q,$routeParams){_LocationBooking_.delete=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"400")});spyOn(history,"back");$scope.locationBooking={Name:"Test"};$routeParams.locationBookingId=4;$scope.confirm();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Ett oväntat fel uppstod när lokal/plats-bokningen skulle tas bort");expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful (status 404) LocationBooking Deleteing",inject(function($rootScope,$controller,_LocationBooking_,$q,$routeParams){_LocationBooking_.delete=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"404")});spyOn(history,"back");$scope.locationBooking={Name:"Test"};$routeParams.locationBookingId=4;$scope.confirm();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Lokal/plats-bokningen existerar inte längre. Hann kanske någon radera den?");expect(history.back).toHaveBeenCalled()}))})});