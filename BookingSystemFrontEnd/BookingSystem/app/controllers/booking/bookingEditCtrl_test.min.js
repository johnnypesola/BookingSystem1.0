describe("module: bookingSystem.booking",function(){beforeEach(module("bookingSystem"));beforeEach(module("bookingSystem.booking"));beforeEach(module("bookingSystem.commonFilters"));var BookingListCtrl,BookingCreateCtrl,BookingEditCtrl;var testCurrentDateObj;var $scope;var $location;var $rootScope;beforeEach(function(){module(function($provide){$provide.factory("Booking",function($q){return{get:jasmine.createSpy("get").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.getBookings,$q)}),save:jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)})}});$provide.factory("BookingType",function($q){return{query:jasmine.createSpy("query").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryBookingType,$q)})}});$provide.factory("Customer",function($q){return{query:jasmine.createSpy("query").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryCustomer,$q)})}})})});beforeEach(inject(function($controller,_Booking_,_$location_,$rootScope){$location=_$location_;$scope=$rootScope;BookingEditCtrl=$controller("BookingEditCtrl",{$scope:$scope,Booking:_Booking_,$rootScope:$rootScope})}));describe("BookingEditCtrl controller",function(){it("should call history.back() and create a FlashMessage after successful Booking editing",inject(function($rootScope,$controller,_Booking_,$routeParams){spyOn(history,"back");$scope.booking=TestHelper.JSON.createBooking;$routeParams.bookingId=0;$scope.save();expect(_Booking_.save).toHaveBeenCalledWith(TestHelper.JSON.createBooking);$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after duplicate Booking editing",inject(function($rootScope,$controller,_Booking_,$q){_Booking_.save=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"409","There is already a Booking with the given name.")});spyOn(history,"back");$scope.booking={Name:"Test"};$scope.save();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual('Det finns redan ett bokningstillfälle som heter "Test". Två bokningstillfällen kan inte heta lika.');expect(history.back).not.toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful Booking editing",inject(function($rootScope,$controller,_Booking_,$q){_Booking_.save=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"500")});spyOn(history,"back");$scope.booking={Name:"Test"};$scope.save();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Ett oväntat fel uppstod när bokningstillfället skulle sparas");expect(history.back).not.toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful Booking editing (booking deleted)",inject(function($rootScope,$controller,_Booking_,$q){_Booking_.save=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"404")});spyOn(history,"back");$scope.booking={Name:"Test"};$scope.save();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual('Bokningstillfället "Test" existerar inte längre. Hann kanske någon radera den?');expect(history.back).toHaveBeenCalled()}))})});