describe("module: bookingSystem.booking",function(){beforeEach(module("bookingSystem"));beforeEach(module("bookingSystem.booking"));beforeEach(module("bookingSystem.commonFilters"));var BookingDeleteCtrl;var testCurrentDateObj;var $scope;var $location;var $rootScope;beforeEach(function(){module(function($provide){$provide.factory("Booking",function($q){return{get:jasmine.createSpy("get").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.getBookings,$q)}),query:jasmine.createSpy("query").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryBookings,$q)}),save:jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)}),"delete":jasmine.createSpy("delete").andCallFake(function(){return TestHelper.addPromiseToObject({},$q)})}})})});beforeEach(inject(function($controller,_Booking_,_$location_,$rootScope,_Redirect_){$location=_$location_;$scope=$rootScope;BookingDeleteCtrl=$controller("BookingDeleteCtrl",{$scope:$scope,Booking:_Booking_,$rootScope:$rootScope,Redirect:_Redirect_})}));describe("BookingDeleteCtrl controller",function(){it("should call history.back() and create a FlashMessage after successful Booking Deleting",inject(function($rootScope,$controller,_Booking_,$routeParams,Redirect){spyOn(Redirect,"to");$scope.booking={Name:"Test"};$routeParams.bookingId=4;$scope.confirm();expect(_Booking_.delete).toHaveBeenCalledWith({bookingId:4});$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect(Redirect.to).toHaveBeenCalled()}));it("should create a FlashMessage after protected Booking Deleteing",inject(function($rootScope,$controller,_Booking_,$q,$routeParams,Redirect){_Booking_.delete=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"400","Foreign key references exists")});spyOn(history,"back");$scope.booking={Name:"Test"};$routeParams.bookingId=4;$scope.confirm();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Bokningstillfället kan inte raderas eftersom det finns"+" någonting som refererar till bokningstillfället");expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful (status 500) Booking Deleteing",inject(function($rootScope,$controller,_Booking_,$q,$routeParams){_Booking_.delete=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"500")});spyOn(history,"back");$scope.booking={Name:"Test"};$routeParams.bookingId=4;$scope.confirm();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Ett oväntat fel uppstod när bokningstillfället skulle tas bort");expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful (status 400) Booking Deleteing",inject(function($rootScope,$controller,_Booking_,$q,$routeParams){_Booking_.delete=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"400")});spyOn(history,"back");$scope.booking={Name:"Test"};$routeParams.bookingId=4;$scope.confirm();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Ett oväntat fel uppstod när bokningstillfället skulle tas bort");expect(history.back).toHaveBeenCalled()}));it("should create a FlashMessage after unsuccessful (status 404) Booking Deleteing",inject(function($rootScope,$controller,_Booking_,$q,$routeParams){_Booking_.delete=jasmine.createSpy("save").andCallFake(function(){return TestHelper.addPromiseToObject({},$q,"404")});spyOn(history,"back");$scope.booking={Name:"Test"};$routeParams.bookingId=4;$scope.confirm();$scope.$digest();expect($rootScope.FlashMessage).toBeDefined();expect($rootScope.FlashMessage.message).toEqual("Bokningstillfället existerar inte längre. Hann kanske någon radera den?");expect(history.back).toHaveBeenCalled()}))})});