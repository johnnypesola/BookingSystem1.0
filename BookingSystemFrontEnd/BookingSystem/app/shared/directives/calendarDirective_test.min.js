describe("directive: calendarDirective",function(){beforeEach(module("bookingSystem.commonFilters"));beforeEach(module("bookingSystem.calendarDirective"));beforeEach(module("templates"));var testCurrentDateObj;var $scope;var q;var $location;var calendarElement;var calendarController;var dayElement;var dayController;var monthElement;beforeEach(function(){module(function($provide){$provide.factory("Booking",function($q){return{get:jasmine.createSpy("get").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.getBookings,q)}),query:jasmine.createSpy("query").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryBookings,q)}),queryMoreForPeriod:jasmine.createSpy("queryMoreForPeriod").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryMoreForPeriodBookings,q)}),queryLessForPeriod:jasmine.createSpy("queryLessForPeriod").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryLessForPeriodBookings,q)}),queryDay:jasmine.createSpy("queryDay").andCallFake(function(){return TestHelper.addPromiseToObject(TestHelper.JSON.queryDayBookings,q)})}});$provide.constant("API_URL","http://localhost:6796/api/")})});beforeEach(inject(function($controller,$rootScope,$compile,_$q_,_Booking_,_$location_){testCurrentDateObj=new Date;$location=_$location_;q=_$q_;$scope=$rootScope;var calendarElem=angular.element('<booking-calendar booking-type="booking"></booking-calendar>');calendarElement=$compile(calendarElem)($scope);var dayElem=angular.element('<a bookingCalendarDay="10"></div>');dayElement=$compile(dayElem)($scope);var monthElem=angular.element('<a change-month-button direction="next" class="next-month">&#8594;</a>');monthElement=$compile(monthElem)($scope);$scope.$digest();calendarController=calendarElement.controller("bookingCalendar");dayController=dayElement.controller("bookingCalendarDay");$scope=calendarElement.scope()}));it("should have correct booking-data after getBookingsForMonth()",function(){var testCallBack=jasmine.createSpy("testCallBack");calendarController.getBookingsForMonth(testCallBack);expect(calendarController.bookingsForMonthArray).toEqual(TestHelper.JSON.queryLessForPeriodBookings);calendarController.bookingsForMonthArray.$promise.then(function(){expect(testCallBack).toHaveBeenCalled()})});it("should have correct values after initDateVariables() and prepareCalendarDays()",function(){calendarController.initDateVariables();calendarController.prepareCalendarDays();var calendarDaysArrayExpectedLength=calendarController.currentMonthStartWeekDay-1+calendarController.currentMonthNumberOfDays+(7-calendarController.currentMonthEndWeekDay);expect(calendarDaysArrayExpectedLength).toEqual(calendarController.calendarDaysArray.length)});it("should have correct scope values after prepareCalendarDays() and addVarsToScope()",function(){calendarController.prepareCalendarDays();calendarController.addVarsToScope();expect($scope.datedata.currentYear).toEqual(testCurrentDateObj.getFullYear());expect($scope.datedata.currentMonth).toEqual(testCurrentDateObj.getMonth());expect($scope.datedata.currentMonthName).toEqual(moment(testCurrentDateObj).format("MMMM"));expect($scope.datedata.currentDayName).toEqual(moment(testCurrentDateObj).format("dddd"));expect($scope.datedata.currentMonthNumberOfDays).toEqual(new Date(testCurrentDateObj.getFullYear(),testCurrentDateObj.getMonth()+1,0).getDate());expect($scope.datedata.calendarDays).toEqual(calendarController.calendarDaysArray)});it("should have correct scope values after changeToDay() method",function(){expect(calendarController.bookingType).toEqual("booking");var event=$scope.$broadcast("testEvent");$scope.changeToDay(dayElement,{number:10},event);expect($scope.datedata.bookings).toEqual(TestHelper.JSON.queryMoreForPeriodBookings);expect(calendarController.currentDateObj).toEqual(new Date(calendarController.currentYear,calendarController.currentMonth,10));expect(+calendarController.selectedMonth).toEqual(calendarController.currentDateObj.getMonth()+1);expect(calendarController.selectedDay).toEqual(calendarController.currentDateObj.getDate())})});